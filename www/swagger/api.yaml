openapi: 3.0.0

info:
  title: Shinservice API
  description: Methods API of Shinservice
  version: 1.0.0

servers:
  - url: http://shinapi.localhost
    description: Localhost develop server
tags:
  - name: Proxy
    description: Прокси
  - name: Custom
    description: Кастомные методы

paths:
  /UploadOrderForDelivery:
    get:
      tags:
        - "Proxy"
      summary: "Загрузка заказа по ID"
      description: "Load order for delivery"
      operationId: "Load order"
      parameters:
        - in: query
          name: DocumentNumber
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mark'
        404:
          $ref: '#/components/schemas/404'

  /DownloadMarksToOrderForDelivery:
    post:
      tags:
        - "Proxy"
      summary: "Добавление заказа"
      description: "Add order for delivery"
      operationId: "Add order"
      parameters:
        - in: query
          name: DocumentNumber
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                 $ref: '#/components/schemas/Mark'
              required:
                - DocumentNumber
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mark'
        404:
          $ref: '#/components/schemas/404'

  /UploadSalesMark:
    get:
      tags:
        - "Proxy"
      summary: "Загрузка продажи по ID"
      description: "Load sales marks"
      operationId: "Load sales marks"
      parameters:
        - in: query
          name: DocumentNumber
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sales'
        404:
          $ref: '#/components/schemas/404'


  /DownloadSalesMark:
    post:
      tags:
        - "Proxy"
      summary: "Добавление продажи"
      description: "Add sale for delivery"
      operationId: "Add sale"
      parameters:
        - in: query
          name: DocumentNumber
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sales'
              required:
                - DocumentNumber
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mark'
        404:
          $ref: '#/components/schemas/404'


  /order_for_delivery/{id}:
    get:
      tags:
        - "Custom"
      summary: "Загрузка заказа по ID (custom)"
      description: "Load order for delivery"
      operationId: "Load order (custom)"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mark'
        404:
          $ref: '#/components/schemas/404'

  /sales_mark/{id}:
    get:
      tags:
        - "Custom"
      summary: "Загрузка продажи по ID (custom)"
      description: "Load sales marks"
      operationId: "Load sales marks (custom)"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sales'
        404:
          $ref: '#/components/schemas/404'

  /Soap:
    post:
      tags:
        - "Proxy"
      summary: "Soap методы"
      description: "Soap methods"
      operationId: "Soap methods"
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/SoapEnvRequest'
      responses:
        '200':
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SoapEnvResponse'
        404:
          $ref: '#/components/schemas/404'

#  /sales_mark/add:
#    post:
#      tags:
#        - "Custom"
#      summary: "Добавление продажи"
#      description: "Add order for delivery"
#      operationId: "Add order (custom)"
#      requestBody:
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                data:
#                  type: array
#                  description: данные
#                  example: [ 1, 2 ]
#              required:
#                - DocumentNumber
#      responses:
#        200:
#          description: OK
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  id:
#                    type: string
#                  createdAt:
#                    $ref: '#/components/schemas/DateTime'
#        404:
#          $ref: '#/components/schemas/404'


#  /order_for_delivery/add:
#    post:
#      tags:
#        - "Custom"
#      summary: "Добавление заказа (custom)"
#      description: "Add order for delivery"
#      operationId: "Add order (custom)"
#      requestBody:
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                data:
#                  type: array
#                  description: данные
#                  example: [ 1, 2 ]
#              required:
#                - DocumentNumber
#      responses:
#        200:
#          description: OK
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  id:
#                    type: string
#                  createdAt:
#                    $ref: '#/components/schemas/DateTime'
#        404:
#          $ref: '#/components/schemas/404'

components:
  schemas:

    Mark:
      description: Заказ
      type: object
      properties:
        Марка:
          type: string
          description: Марка
          example: "010352870089138621kXREs"
        Номенклатура:
          type: string
          description: Номенклатура
          example: "MICH 285/30 ZR19 Pilot Super Sport ZP (94Y)"

    Goods:
      description: Товар
      type: object
      properties:
        Номенклатура:
          type: string
          description: Номенклатура
          example: "MICH 285/30 ZR19 Pilot Super Sport ZP (94Y)"
        Количество:
          type: integer
          description: Количество
          example: 2

    Sales:
      description: Продажа
      type: object
      properties:
        НомерДокументаРасхода:
          type: string
          description: Номер Документа Расхода
          example: "010352870089138621kXREs"
        Товары:
          type: array
          items:
            $ref: '#/components/schemas/Goods'
        Марки:
          type: array
          items:
            $ref: '#/components/schemas/Mark'
        ТолькоПоПереченюМарок:
          type: boolean
          description: Только По Переченю Марок
          example: false

    SalesMark:
      description: Продажа
      properties:
        Status:
          type: boolean
          description: Статус
          example: false
        Result:
          type: array
          items:
            $ref: '#/components/schemas/Sales'

    SoapEnvRequest:
      xml:
        name: Envelope
        prefix: soap
        namespace: "http://www.w3.org/2003/05/soap-envelope"
      description: XML for soap
      properties:
        Exc:
          type: string
          example: 'ExchangeOfSite'
          xml:
            attribute: true
            name: 'xmlns:exc'
        Header:
          type: object
          $ref: '#/components/schemas/SoapHeader'
        Body:
          type: object
          $ref: '#/components/schemas/SoapBodyRequest'


    SoapEnvResponse:
      xml:
        name: Envelope
        prefix: soap
        namespace: "http://www.w3.org/2003/05/soap-envelope"
      description: XML for soap
      properties:
        Header:
          type: object
          $ref: '#/components/schemas/SoapHeader'
        Body:
          type: object
          $ref: '#/components/schemas/SoapBodyResponse'

    SoapHeader:
      example: ""
      xml:
        name: Header
        prefix: soap
        wrapped: false

    SoapBodyRequest:
      xml:
        name: Body
        prefix: soap
      properties:
        Action:
          type: object
          $ref: '#/components/schemas/SoapExecRequest'

    SoapBodyResponse:
      xml:
        name: Body
        prefix: soap
      properties:
        Action:
          type: object
          $ref: '#/components/schemas/SoapExecResponse'

    SoapExecRequest:
      xml:
        name: SetVOXstatus
        prefix: exc
      properties:
        OrderNumber:
          xml:
            name: OrderNumber
            prefix: exc
          type: string
          example: '72649'
        Status:
          xml:
            name: Status
            prefix: exc
          type: boolean
          example: true

    SoapExecResponse:
      xml:
        name: SetVOXstatusResponse
        prefix: m
      properties:
        Result:
          type: object
          $ref: '#/components/schemas/Result'

    Result:
      xml:
        name: return
        prefix: m
      properties:
        Xs:
          type: string
          example: 'http://www.w3.org/2001/XMLSchema'
          xml:
            attribute: true
            name: 'xmlns:xs'
        Xsi:
          type: string
          example: 'http://www.w3.org/2001/XMLSchema-instance'
          xml:
            attribute: true
            name: 'xmlns:xsi'

    400:
      description: Bad request
      type: string
      example: Invalid parameter
    401:
      description: Invalid credentials
      type: string
      example: Invalid credentials.
    404:
      description: Not found response
      type: string
      example: Not found